{
    "version": 1,
    "type": "project",
    "tree": {
        "name": "workspace",
        "type": "folder",
        "children": [
            {
                "name": "Examples",
                "type": "folder",
                "children": [
                    {
                        "name": "affect method",
                        "type": "code",
                        "code": "/*\nThe Array prototype has been extended with a bunch of helpful methods that make things a bit more concise and easier to write, especially in the context of filter functions.\n\nMake sure to load any picture into the preview canvas before running this code, in order to see the effects.\n*/\n\n// Negative\nfilter(c => c.affectRGB(v => 255 - v));\n// same as c => [255 - c[0], 255 - c[1], 255 - c[2], c[3]]\n\n// Apply power curve to green channel\nfilter(c => c.affectG(v => 255 * (v / 255) ** 2));\n// same as c => [c[0], 255 * (c[1] / 255) ** 2, c[2], c[3]]\n\n// Randomize opacity per pixel\nfilter(c => c.affectA(_ => rnd(0, 255)));\n// same as c => [c[0], c[1], c[2], rnd(0, 255)]\n// different from c => c.setA(rnd(0, 255)) - this would assign same random value to all pixels, whereas the affectA method assigns a different value to each pixel\n\n// Reset alpha\nfilter(c => c.setA(255));\n// same as c => [c[0], c[1], c[2], 255]\n\n"
                    },
                    {
                        "name": "animation",
                        "type": "code",
                        "code": "setSize(512);\nclear();\nlet i = 0;\nconst duration = 60000;\nanimate((dt, t) => {\n  const p = t / duration;\n  context.fillStyle = getSpectrumColor(p, 1.2).toRGBA();\n  context.fillRect(p * w, 0, 20, h);\n}, duration);"
                    },
                    {
                        "name": "boxblur",
                        "type": "code",
                        "code": "const w1 = w - 1, h1 = h - 1;\n\nconst rx = _number(\"DisX\", 20, 0, 256, 1);\nconst ry = _number(\"DisY\", rx, 0, 256, 1);\nconst rx1 = Math.floor(rx / 2), ry1 = Math.floor(ry / 2);\nconst rx2 = rx - rx1, ry2 = ry - ry1;\n\n// First: get sum of R, G, B\nconst sums = [ [], [], [] ];\nconst getters = getChannelGetters();\nfor (let off = 0; off < 3; off++) {\n  const g = getters[off];\n  const data = sums[off];\n  for (let y = 0; y < h; y++) {\n    data[y] = [];\n  }\n  data[0][0] = g(0, 0);\n  // Top row\n  for (let x = 1; x < w; x++) {\n    data[0][x] = data[0][x - 1] + g(x, 0);\n  }\n  // Left row\n  for (let y = 1; y < h; y++) {\n    data[y][0] = data[y - 1][0] + g(0, y);\n  }\n  // Inner\n  for (let y = 1; y < h; y++) {\n    for (let x = 1; x < w; x++) {\n      data[y][x] = data[y - 1][x] + data[y][x - 1] - data[y - 1][x - 1] + g(x, y);\n    }\n  }\n}\n\n// Second: compute average for all pixels\nfilter((c, x, y) => {\n  const x1 = Math.max(0, x - rx1), y1 = Math.max(0, y - ry1);\n  const x2 = Math.min(w1, x + rx2), y2 = Math.min(h1, y + ry2);\n  for (let off = 0; off < 3; off++) {\n    const sum = sums[off][y2][x2] - sums[off][y1][x2] - sums[off][y2][x1] + sums[off][y1][x1];\n    const count = (x2 - x1) * (y2 - y1);\n    c[off] = sum / count;\n  }\n  return c;\n});\nconsole.log(\"done\");"
                    },
                    {
                        "name": "brush",
                        "type": "code",
                        "code": "\n// Create external canvas for brush\nconst halfsz = 64;\nconst brush = createCanvas(2 * halfsz).use();\n\ngenRadial((ang, dis) => {\n  // Angle dependent color\n  const col = getSpectrumColor(ang / Math.PI / 2, 1.2);\n  // Adjust alpha value based on distance to center\n  col[3] = 255 - 255 * ease(dis) ** 2;\n  return col;\n});\n\n// Return to preview canvas\nuseCanvas();\nclear();\ncontext.setTransform(1, 0, 0, 1, 0, 0);\ncontext.globalAlpha = 0.5;\ncontext.translate(w / 2, h / 2);\nanimate((dt, t, { mouse }) => {\n  let x = 400 * wobble(t, 3),\n    y = 300 * wobble(t, 2.4, 1.234),\n    angle = t * 0.0045;\n  if (mouse.inside) {\n    x = mouse.x - w / 2;\n    y = mouse.y - h / 2 - (mouse.left.pressed ? 30 : 0);\n  }\n  context.save();\n  context.translate(x, y);\n  context.rotate(angle);\n  context.drawImage(brush, -halfsz, -halfsz);\n  context.restore();\n}, 20000, 0.8)"
                    },
                    {
                        "name": "bufferedFilter",
                        "type": "code",
                        "code": "const w1 = w - 1, h1 = h - 1;\n\n// Mirror (note: can be implemented much faster with context.scale and context.drawImage)\n/* filter((c, x, y, g) => {\n  return g(w1 - x, y);\n}, true); */\n\n// Primitive blur\nclipRect(1, 1, w - 2, h - 2)\nfilter((c, x, y, g) => {\n  const colors = [\n    c,\n    g(x - 1, y),\n    g(x, y - 1),\n    g(x + 1, y),\n    g(x, y + 1)\n  ];\n  return blendManyColors(colors);\n}, true);"
                    },
                    {
                        "name": "color gradient",
                        "type": "code",
                        "code": "useCanvas(previewCanvas)\nsetSize(512);\n\nconst gradName = _enum(\"Gradient\", \"red\", [\"grayscale\", \"red\", \"green\", \"blue\", \"rainbow\", \"wild\"]);\n\nconst gradients = {\n  \"grayscale\": ColorGradient.grayscale,\n  \"red\": ColorGradient.redscale,\n  \"green\": ColorGradient.greenscale,\n  \"blue\": ColorGradient.bluescale,\n  \"rainbow\": ColorGradient.rainbow2,\n  \"wild\": new ColorGradient([\n    255,\n    [255, 0, 0],\n    [255, 255, 0],\n    [0, 255, 0],\n    [0, 255, 255],\n    [0, 0, 255, 100],\n    [255, 0, 255],\n    [255, 0, 0],\n    0\n  ], \"cubic\", \"mirror\")\n}\n\nconst grad = gradients[gradName];\n\ngenRadial((a, d) => grad.get(d));"
                    },
                    {
                        "name": "color gradient nonuniform",
                        "type": "code",
                        "code": "useCanvas(previewCanvas)\nsetSize(512);\n\nconst v = _number('Red Pos', 0.5, 0.001, 0.999, 0.001)\n\nconst grad = new ColorGradient({\n  0: 255,\n  [v]: [255, 0, 0],\n  1: 0\n}, \"cos3\");\n\ngenRadial((a, d) => grad.get(d))"
                    },
                    {
                        "name": "distortion",
                        "type": "code",
                        "code": "\n\nscaleBelow(1000);\n\nfilter((c, x, y, getPixel) => {\n  const dx = 30 * (wobble(x * 26) + wobble(y * 31));\n  const dy = 30 * (wobble(x * 33) + wobble(y * 38));\n  return getPixel(x + dx, y + dy);\n}, true, true, true);\n// Ã® three booleans: buffered, interpolated &\n// image size limited getter function"
                    },
                    {
                        "name": "fill",
                        "type": "code",
                        "code": "\n\nfill(200); // greyscale values between 0 and 255\n\nfill(\"red\"); // CSS colors\n\nclear(); // fully transparent black\n\nfill(); // fully opaque black\n\nfill([0, 128, 255]); // RGB array (blue)\n\nfill([255, 128, 0, 0.3]); // RGBA array (transparent orange)"
                    },
                    {
                        "name": "filter",
                        "type": "code",
                        "code": "/*\nThis snippet works with whatever is currently in the canvas. You may e.g. run the generator example before running this.\nAlternatively, if that feature is already implemented, you can drag and drop any picture/photo from your hard drive into the preview canvas on the right, and then run the filter.\n\nThis filter simply exchanges color channels. Executing it three times in a row should yield the original result again.\n*/\n\n// Ensure the given image is scaled down to a size below 1000x1000; only used here because description encourages loading photos, which may have many megapixels, making the filter function quite slow; scaling it down beforehand is pretty quick however\nscaleBelow(1000); // enable when implemented!\n\nfilter((c, x, y) => {\n  return [c[1], c[2], c[0], c[3]];\n});"
                    },
                    {
                        "name": "fractalNoise",
                        "type": "code",
                        "code": "setSize(512);\n\nconst layers = 6;\nconst ampFac = 0.6;\nconst initialAmp = 80;\nconst freq = 1 / 100;\nconst freqFac = 2;\n\ngen((x, y) => {\n    let v = 127.5, amp = initialAmp, f = freq;\n    for (let l = 0; l < layers; l++) {\n      v += amp * blob2d(70000 + x * f, 252423 + y * f);\n      amp *= ampFac;\n      f *= freqFac;\n    }\n    return v;\n})"
                    },
                    {
                        "name": "generator",
                        "type": "code",
                        "code": "\nsetSize(1024, 1024);\n\ngen((x, y) => {\n  const r = 127.5 + 127.5 * Math.sin(0.01 * (x + y));\n  const g = 127.5 + 127.5 * Math.sin(0.001 * (x - 512) * (y - 512));\n  const b = 127.5 + 127.5 * Math.sin(x * 0.02) * Math.sin(y * 0.01);\n  return [r, g, b, 255];\n});"
                    },
                    {
                        "name": "hsl conversion",
                        "type": "code",
                        "code": "/*\nBy default pixel data is in RGBA, each value between 0 and 255. Sometimes however what you want to work with may not be RGB, but the more meaningful HSL color space (hue, saturation, luminance, each between 0 and 1).\nFor such cases, you may temporarily convert values between them using the provided Array methods toHSL() and toRGB().\nAlternatively, appropriate affector methods exist as well.\n\nMake sure to load an image before running this code.\n*/\n\nscaleBelow(1000, 1000, false);\n\nconst hue = _number('Hue', 0.3, 0, 1, 0.001);\n\n// Hue shift\nclipRel(0.1, 0.1, 0.2, 0.2);\nfilter(c => c.affectH(h => h + 0.5))\n\n// Increase saturation\nclipRel(0.4, 0.1, 0.2, 0.2);\nfilter(c => c.affectS(s => s ** 0.5))\n\n// Reduce luminance\nclipRel(0.7, 0.1, 0.2, 0.2);\nfilter(c => c.affectL(s => s ** 2))\n\n// Slightly more complex: nullify saturation for all colors outside a certain hue range\nclipRel(0.1, 0.4, 0.2, 0.5);\nfilter(c => {\n  // Convert to HSL first\n  c.toHSL();\n  \n  // Calculate saturation factor based on hue difference from reference\n  const diff = getHueDiff(c[0], hue);\n  const satFactor = mapRange(Math.abs(diff), 0, 0.5, 1, 0) ** 2;\n  // Apply to saturation\n  c[1] *= satFactor;\n\n  // Don't forget to convert back to RGB in the end\n  return c.toRGB();\n})\n\n// Apply rainbow color to area\nclipRel(0.4, 0.4, 0.2, 0.5);\nfilter((c, x, y) => {\n  c.toHSL();\n  c[0] = (2 * y / h) % 1;\n  c[1] = c[1] ** 0.5;\n  return c.toRGB();\n});"
                    },
                    {
                        "name": "interpolation",
                        "type": "code",
                        "code": "\nsetSize(600, 400);\nfill(\"white\");\n\nconst heights = [\n  0.5,\n  0.5,\n  1,\n  0,\n  0.5,\n  0.7,\n  0.3,\n  0.6,\n  1\n];\n\ncontext.strokeStyle = \"#0001\";\n\n// Simple 2 point interpolations\nfor (let int of [\"step0\", \"linear\", \"cubic\", \"cos3\"]) {\n  context.beginPath();\n  for (let x = 1; x < 7; x += 0.01) {\n    const y1 = heights[Math.floor(x)], y2 = heights[Math.floor(x) + 1];\n    const y = y1 + (y2 - y1) * Interpolation[int](x - Math.floor(x));\n    context.lineTo(80 * x - 30, 300 - 100 * y);\n  }\n  context.stroke();\n}\n\n\ncontext.strokeStyle = \"#000f\";\n\n// Fancy 4 point interpolations\nfor (let int of [\"smoothBound\"]) {\n  context.beginPath();\n  for (let x = 1; x < 8; x += 0.01) {\n    const i = Math.floor(x);\n    const y = FourPointInterpolation[int](\n      heights[i - 1], heights[i], heights[i + 1], heights[i + 2], x - i\n    );\n    context.lineTo(80 * x - 30, 300 - 100 * clamp(y, 0, 1));\n  }\n  context.stroke();\n}"
                    },
                    {
                        "name": "params",
                        "type": "code",
                        "code": "\nsetSize(512, 512);\n\n// Parameters\nconst lanes = _number(\"Lanes\", 3, 0, 32, 1);\nconst disScale = _number(\"Scaling\", 0.02, 0, 0.5, 0.001);\nconst invert = _boolean(\"Invert\", false);\nconst title = _string(\"Title\", \"\");\nconst gradient = _enum(\"Colorization\", \"grayscale\", [\"grayscale\", \"fire\", \"water\", \"rainbow\"]);\n\nconst gradients = {\n  \"grayscale\": new ColorGradient([0, 255]),\n  \"fire\": new ColorGradient([[80,0,0], [255,0,0], [255,255,0], 255]),\n  \"water\": new ColorGradient([[0,0,100],[0,120,220],[30,160,250],[120,220,255]]),\n  \"rainbow\": ColorGradient.rainbow\n}\nconst grad = gradients[gradient];\n\nconst c = getCanvas();\nconst cx = c.width / 2, cy = c.height / 2;\n\n// Generate spirale\ngen((x, y) => {\n  const dx = x - cx, dy = y - cy;\n  const dis = Math.sqrt(dx * dx + dy * dy);\n  const angle = Math.atan2(dx, dy) * (invert ? -1 : 1);\n  const v = Math.sin(dis * disScale + angle * lanes);\n  return grad.get(0.5 + 0.5 * v);\n});\n\n// Add title string\nif (title != \"\") {\n  context.fillStyle = \"black\";\n  context.textAlign = \"center\";\n  context.font = \"36px Arial\";\n  context.fillText(title, w / 2 + 1, 40 + 1);\n  context.fillStyle = \"red\";\n  context.fillText(title, w / 2, 40);\n}"
                    },
                    {
                        "name": "perlinAnimation",
                        "type": "code",
                        "code": "\nsetSize(256);\n\nanimate((dt, t) => {\n  gen((x, y) => 127.5 + 127.5 * perlin3d(x / 30, y / 30, t / 3000))\n}, 30000)"
                    },
                    {
                        "name": "perlinNoise",
                        "type": "code",
                        "code": "setSize(512);\n\ngen((x, y) => {\n  x /= 64; y /= 64;\n  return 127.5 + 127.5 * perlin2d(x + 1, y)\n})"
                    },
                    {
                        "name": "subsampling",
                        "type": "code",
                        "code": "setSize(512, 512);\n\n// Without subsampling\ngen((x, y) => {\n    return y < h / 4 + h / 6 * Math.sin(x * 0.01) ? 0 : 255;\n});\ncontext.font = \"24px Arial\";\ncontext.fillStyle = \"red\";\ncontext.fillText(\"No subsampling\", 20, 40);\n\nconst cnv = cloneCanvas();\n\n// With subsampling\ngen((x, y) => {\n    return y < h / 4 + h / 6 * Math.sin(x * 0.01) ? 0 : 255;\n}, 4);\ncontext.fillText(\"4x subsampling\", 20, 40);\n\n\n// Compare\ncontext.drawImage(cnv, 0, h / 2);"
                    },
                    {
                        "name": "subsampling_radial",
                        "type": "code",
                        "code": "\nsetSize(512);\n\n// Render generator the standard way to left half\nclipRect(0, 0, w / 2, h);\ngenRadial(colorize);\n\n// Render generator with fancy subsampling to right half\nclipRect(w / 2, 0);\ngenRadial(colorize, 4);\n\n\n// Separating bar in the middle\ncontext.fillStyle = \"black\";\ncontext.fillRect(w / 2 - 3, 0, 6, h);\n\n\nfunction colorize(a, d) {\n  const r = d % 0.2 < 0.1 ? 255 : 0,\n    g = ((a + Math.PI) % (Math.PI / 4) < (Math.PI / 8)) ? 255 : 0,\n    b = ((d % 0.3) < 0.15) ? 255 : 0;\n  return [r, g, b];\n}"
                    }
                ]
            },
            {
                "name": "Folder2",
                "type": "folder",
                "children": [
                    {
                        "name": "folder2code",
                        "type": "code",
                        "code": "console.log(\"Amazing code!\");"
                    },
                    {
                        "name": "rainbow",
                        "type": "code",
                        "code": "\nscaleBelow(1000);\n\nfilter((c, x, y) => {\n  c.toHSL();\n  c[0] = y / h;\n  c[1] = c[1] ** 0.5;\n  return c.toRGB();\n});"
                    },
                    {
                        "name": "testCode",
                        "type": "code",
                        "code": ""
                    }
                ]
            },
            {
                "name": "Fractals",
                "type": "folder",
                "children": [
                    {
                        "name": "Circles",
                        "type": "code",
                        "code": "setSize(1000);\n\nfill(128);\n\nconst radiusFactor = 0.414;\nconst childCount = 4;\nconst angleStep = 2 * Math.PI / childCount;\n\nlet angleOff = _number(\"Angle Offset\", 0, 0, Math.PI, 0.001);\nconst alternate = _boolean(\"Alternate\", false);\n\nanimate((dt, t, state) => {\n  angleOff = t * 0.001;\n  drawCircle(w / 2, h / 2, w / 2, state.mouse.left.pressed, -angleOff / 2);\n});\n\nfunction drawCircle(x, y, radius, isBlack, angle) {\n  // Draw self\n  angle += angleOff * (alternate ? (isBlack ? 1 : -1) : 1);\n  context.fillStyle = isBlack ? \"black\" : \"white\";\n  context.beginPath();\n  context.moveTo(x, y);\n  context.arc(x, y, radius, 0, 6.283);\n  context.fill();\n  // Draw children\n  if (radius > 3) {\n    const newRadius = radius * radiusFactor;\n    const disFromCenter = radius - newRadius;\n    const childAngle = angle;\n    for (let i = 0; i < childCount; i++) {\n      const dx = disFromCenter * Math.sin(angle), dy = disFromCenter * Math.cos(angle);\n      drawCircle(x + dx, y + dy, newRadius, !isBlack, childAngle)\n      angle += angleStep;\n    }\n  }\n}"
                    },
                    {
                        "name": "binary",
                        "type": "code",
                        "code": "setSize(1024);\ngen((x, y) => x & y);"
                    },
                    {
                        "name": "mandelbrot",
                        "type": "code",
                        "code": "setSize(800, 512);\nclipRect();\n\nconst iterations = 100;\n\nconst grad = new ColorGradient([\n  [0, 0, 0, 0], 0,\n  [255, 0, 0],\n  [255, 255, 0],\n  255,\n  0, [0, 0, 0, 0]\n]);\n\ngenCentered((x, y) => {\n  let a = 0, b = 0, tmp = 0, i = 0;\n  for (; i < iterations && a * a + b * b < 4; i++) {\n    // c -> cÂ² + (x,y)\n    tmp = a * a - b * b;\n    b = 2 * a * b + y;\n    a = tmp + x;\n  }\n  return grad.get(i / iterations);\n}, 2);"
                    }
                ]
            },
            {
                "name": "Interactive",
                "type": "folder",
                "children": [
                    {
                        "name": "gameOfLife",
                        "type": "code",
                        "code": "/*\n  Usage:\n  click tiles to toggle them\n  press Space to pause/resume\n*/\n\nconst tilesX = _number(\"Tiles X\", 32, 1, 128, 1);\nconst tilesY = _number(\"Tiles Y\", 32, 1, 128, 1);\n\nconst aliveRule = _string(\"Alive Rule\", \"2,3\");\nconst rulesetAlive = aliveRule.split(\",\").map(s => +s.trim());\nconst deadRule = _string(\"Dead Rule\", \"3\");\nconst rulesetDead = deadRule.split(\",\").map(s => +s.trim());\n\nconst tileSize = 16;\nsetSize(tilesX * tileSize, tilesY * tileSize);\n\nconst tiles = range(tilesY).map(v => range(tilesX).map(_ => false));\nconst neighbors = tiles.map(row => row.map(v => 0));\n\nconst updateStep = 250;\nlet tileStateToSet = true;\nlet playing = false;\nlet nextUpdate = 0;\n\nanimate((dt, t, { mouse, getKey }) => {\n  drawGame();\n  if (mouse.inside) {\n    const tx = Math.floor(mouse.x / tileSize),\n      ty = Math.floor(mouse.y / tileSize);\n    if (mouse.left.down) {\n      tileStateToSet = !tiles[ty][tx];\n    }\n    if (mouse.left.pressed) {\n      tiles[ty][tx] = tileStateToSet;\n    }\n  }\n  if (getKey(\" \").down) {\n    playing = !playing;\n    console.log(playing ? \"Resumed\" : \"Paused\");\n  }\n  if (playing) {\n    if (t >= nextUpdate || t < nextUpdate - updateStep) {\n      nextUpdate = t + updateStep;\n      updateGame();\n    }\n  }\n}, 86400000);\n\n\nfunction drawGame() {\n  fill(\"white\");\n  forAllTiles((x, y) => {\n    context.fillStyle = tiles[y][x] ? \"black\" : \"white\";\n    context.fillRect(x * tileSize, y * tileSize, tileSize - 1, tileSize - 1);\n  });\n}\n\nfunction updateGame() {\n  // Step 1: Count neighbors\n  forAllTiles((x, y) => {\n    neighbors[y][x] = 0;\n    forRange(x - 1, x + 2, y - 1, y + 2, (nx, ny) => {\n      if (nx !== x || ny !== y) {\n        neighbors[y][x] += (tiles[ny][nx] ? 1 : 0);\n      }\n    });\n  });\n  // Step 2: Update states\n  forAllTiles((x, y) => {\n    const ruleset = tiles[y][x] ? rulesetAlive : rulesetDead;\n    tiles[y][x] = ruleset.includes(neighbors[y][x]);\n  });\n}\n\nfunction forAllTiles(func) {\n  forRange(0, tilesX, 0, tilesY, func);\n}\n\nfunction forRange(xFrom, xTo, yFrom, yTo, func) {\n  xFrom = Math.max(0, xFrom);\n  xTo = Math.min(tilesX, xTo);\n  yFrom = Math.max(0, yFrom);\n  yTo = Math.min(tilesY, yTo);\n  for (let y = yFrom; y < yTo; y++) {\n    for (let x = xFrom; x < xTo; x++) {\n      func(x, y);\n    }\n  }\n}"
                    }
                ]
            },
            {
                "name": "Test",
                "type": "folder",
                "children": [
                    {
                        "name": "Inner Snippet",
                        "type": "code",
                        "code": "setSize(800);\nconst red = _param('Red', 0, 0, 255);\ngen((x, y) => x & y)\nfilter(c => [red, 255 - c[1], c[2], 255])"
                    },
                    {
                        "name": "new Code",
                        "type": "code",
                        "code": "console.log(\"This is the new code! Wow!\");"
                    },
                    {
                        "name": "perlinTest",
                        "type": "code",
                        "code": "\nsetSize(400, 200)\n\ncontext.fillRect(0, h / 2, w, 1);\n\nfor (let px = 0; px < w; px++) {\n  if (px % 50 == 0) {\n    context.fillRect(px, 0, 1, h);\n  }\n  const rx = px / 50;\n  const ry = perlin(rx);\n  const py = h / 2 - h * ry;\n  context.fillRect(px, py, 3, 3);\n}"
                    },
                    {
                        "name": "temp",
                        "type": "code",
                        "code": "const cell = 64;\n\nfilter((c, x, y) => {\n  if (Math.abs(c[0] - 127.5) <= 1) {\n    return [255,0,0];\n  } else if (x % cell == 0 || y % cell == 0){\n    return blendColors(c, [0,0,255,255], 0.05);\n  } else { return c; }\n})"
                    }
                ]
            },
            {
                "name": "Snippet 1",
                "type": "code",
                "code": "gen((x,y) => 127.5 + 127.5 * Math.sin(x * 0.1) * Math.sin(y * 0.1))"
            },
            {
                "name": "Snippet 2",
                "type": "code",
                "code": ""
            }
        ]
    },
    "date": 1616762423147
}