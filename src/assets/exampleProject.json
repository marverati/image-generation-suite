{"version":1,"type":"project","tree":{"name":"workspace","type":"folder","children":[{"name":"Examples","type":"folder","children":[{"name":"animation","type":"code","code":"clear();\nlet i = 0;\nanimate((dt, t) => {\n  \n  const p = t / 4000;\n  context.fillStyle = getSpectrumColor(p, 1.2).toRGBA();\n  context.fillRect(p * w, 0, 20, h);\n}, 20000);"},{"name":"brush","type":"code","code":"\n// Create external canvas for brush\nconst halfsz = 64;\nconst brush = createCanvas(2 * halfsz).use();\n\ngenRadial((ang, dis) => {\n  // Angle dependent color\n  const col = getSpectrumColor(ang / Math.PI / 2, 1.2);\n  // Adjust alpha value based on distance to center\n  col[3] = 255 - 255 * ease(dis / halfsz) ** 2;\n  return col;\n});\n\n// Return to preview canvas\nuseCanvas();\nclear();\ncontext.setTransform(1, 0, 0, 1, 0, 0);\ncontext.globalAlpha = 0.5;\ncontext.translate(w / 2, h / 2);\nanimate((dt, t) => {\n  const x = 400 * wobble(t, 3),\n    y = 300 * wobble(t, 2.4, 1.234),\n    angle = t * 0.0015;\n  context.save();\n  context.translate(x, y);\n  context.rotate(angle);\n  context.drawImage(brush, -halfsz, -halfsz);\n  context.restore();\n}, 20000, 1.5)"},{"name":"fill","type":"code","code":"\n\nfill(200); // greyscale values between 0 and 255\n\nfill(\"red\"); // CSS colors\n\nclear(); // fully transparent black\n\nfill(); // fully opaque black\n\nfill([0, 128, 255]); // RGB array (blue)\n\nfill([255, 128, 0, 0.3]); // RGBA array (transparent orange)"},{"name":"filter","type":"code","code":"/*\nThis snippet works with whatever is currently in the canvas. You may e.g. run the generator example before running this.\nAlternatively, if that feature is already implemented, you can drag and drop any picture/photo from your hard drive into the preview canvas on the right, and then run the filter.\n\nThis filter simply exchanges color channels. Executing it three times in a row should yield the original result again.\n*/\n\n// Ensure the given image is scaled down to a size below 1000x1000; only used here because description encourages loading photos, which may have many megapixels, making the filter function quite slow; scaling it down beforehand is pretty quick however\n// scaleBelow(1000); // enable when implemented!\n\nfilter((c, x, y) => {\n  return [c[1], c[2], c[0], c[3]];\n});"},{"name":"generator","type":"code","code":"\nsetSize(1024, 1024);\n\ngen((x, y) => {\n  const r = 127.5 + 127.5 * Math.sin(0.01 * (x + y));\n  const g = 127.5 + 127.5 * Math.sin(0.001 * (x - 512) * (y - 512));\n  const b = 127.5 + 127.5 * Math.sin(x * 0.02) * Math.sin(y * 0.01);\n  return [r, g, b, 255];\n});"},{"name":"params","type":"code","code":"\nsetSize(512, 512);\nconst lanes = _param(\"Lanes\", 3, 0, 32, 1);\nconst disScale = _param(\"Scaling\", 0.02, 0, 0.5, 0.001);\n\nconst c = getCanvas();\nconst cx = c.width / 2, cy = c.height / 2;\n\ngen((x, y) => {\n  const dx = x - cx, dy = y - cy;\n  const dis = Math.sqrt(dx * dx + dy * dy);\n  const angle = Math.atan2(dx, dy);\n  const v = Math.sin(dis * disScale + angle * lanes);\n  return 127.5 + 127.5 * v;\n});"}]},{"name":"Folder2","type":"folder","children":[{"name":"folder2code","type":"code","code":"console.log(\"Amazing code!\");"},{"name":"testCode","type":"code","code":""}]},{"name":"Test","type":"folder","children":[{"name":"Inner Snippet","type":"code","code":"setSize(800);\nconst red = _param('Red', 0, 0, 255);\ngen((x, y) => x & y)\nfilter(c => [red, 255 - c[1], c[2], 255])"},{"name":"new Code","type":"code","code":"console.log(\"This is the new code! Wow!\");"}]},{"name":"Snippet 1","type":"code","code":"gen((x,y) => 127.5 + 127.5 * Math.sin(x * 0.1) * Math.sin(y * 0.1))"},{"name":"Snippet 2","type":"code","code":""}]},"date":1613230483034}